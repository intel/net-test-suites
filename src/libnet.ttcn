/* -*- c-basic-offset: 4; tab-width: 4; -*- */
/*
 * Copyright Â© 2017-2022, Intel Corporation.
 * SPDX-License-Identifier: LGPL-2.1-only
 */

module libnet {

import from libtypes all;

type octetstring in_addr_t length(4);
type octetstring eth_addr_t length(6);
type octetstring in6_addr_t length(16);

type record vlan_tag_t {
	bit3_t		vlan_pri,
	bit1_t		vlan_cfi,
	integer		vlan_id,
	ethertype_t vlan_type
} with {
	variant(vlan_id) "FIELDLENGTH(12),BYTEORDER(last)";
	variant(vlan_type) "BYTEORDER(last)";
}

type record eth_t {
	eth_addr_t	h_dest,
	eth_addr_t	h_source,
	ethertype_t	h_proto,
	vlan_tag_t	vlan optional,
	octetstring	data optional
} with {
	variant(h_proto) "BYTEORDER(last)";
	variant(vlan) "PRESENCE(h_proto = ETHERTYPE_VLAN)";
}

type record ip_t {
	bit4_t		ip_v,
	bit4_t		ip_hl,
	uint8_t		ip_tos,
	uint16_t	ip_len,
	uint16_t	ip_id,
	uint16_t	ip_off,
	uint8_t		ip_ttl,
	ipproto_t	ip_p,
	uint16_t	ip_sum,
	in_addr_t	ip_src,
	in_addr_t	ip_dst,
	octetstring	data optional
} with {
	variant(ip_len) "BYTEORDER(last)";
	variant(ip_len) "LENGTHTO(
		ip_v,ip_hl,ip_tos,ip_len,ip_id,ip_off,ip_ttl,
		ip_p,ip_sum,ip_src,ip_dst,data)";
}

type record ip6_t {
	u32	ip6_vfc,
	uint16_t	ip6_plen,
	ipproto_t	ip6_nxt,
	uint8_t		ip6_hlim,
	in6_addr_t	ip6_src,
	in6_addr_t	ip6_dst,
	octetstring data optional
} with {
	variant(ip6_plen) "BYTEORDER(last)";
	variant(ip6_plen) "LENGTHTO(data)";
}

type record udp_t {
	uint16_t	uh_sport,
	uint16_t	uh_dport,
	uint16_t	uh_ulen,
	uint16_t	uh_sum,
	octetstring	data optional
} with {
	variant(uh_sport, uh_dport, uh_ulen) "BYTEORDER(last)";
	variant(uh_ulen) "LENGTHTO(uh_sport,uh_dport,uh_ulen,uh_sum,data)";
}

type bitstring th_flags_t length(6) with {
	variant "FIELDLENGTH(6),BITORDER(msb)"; };

const th_flags_t URG :='000001'B;
const th_flags_t ACK :='000010'B;
const th_flags_t PSH :='000100'B;
const th_flags_t RST :='001000'B;
const th_flags_t SYN :='010000'B;
const th_flags_t FIN :='100000'B;

const th_flags_t TH_NONE :='000000'B;
template th_flags_t TH_ANY := '??????'B;

type union opt_t {
	record of tcp_opt_t opt,
	octetstring	data
}

const uint8_t TO_MSS := 2;

type record tcp_opt_t {
	uint8_t	kind,
	uint8_t	len,
	octetstring data optional
} with {
	variant "FIELDORDER(msb)";
	variant(len) "LENGTHTO(kind,len,data)";
}

type record of tcp_opt_t tcp_options_t;

type record tcp_t {
	uint16_t	th_sport,
	uint16_t	th_dport,
	u32	th_seq,
	u32	th_ack,
	uint4_t		th_off,
	bit3_t		th_res,
	bit3_t		th_ecn,
	th_flags_t	th_flags,
	uint16_t	th_win,
	uint16_t	th_sum,
	uint16_t	th_urp,
	tcp_options_t options optional,
	octetstring data optional
} with {
	variant(th_sport, th_dport, th_seq, th_ack, th_win) "BYTEORDER(last)";
	variant(options) "REPEATABLE(yes)";
	variant(th_off) "LENGTHTO(th_sport,th_dport,th_seq,th_ack,th_off,
		th_res,th_ecn,th_flags,th_win,th_sum,th_urp,options)";
	variant(th_off) "UNIT(dword32)";
}

/* TCP send template */
template tcp_t ts_TCP(th_flags_t fl := TH_NONE,
					  u32 seq := 0,
					  u32 ack := 0,
					  u32 sum := 0,
					  u16 win := 1280,
					  template tcp_options_t options := omit,
					  template octetstring data := omit) := {
	 th_sport := 4242,
	 th_dport := 4242,
	 th_seq := seq,
	 th_ack := ack,
	 th_off := 5,
	 th_res := '000'B,
	 th_ecn := '000'B,
	 th_flags := fl,
	 th_win := win,
	 th_sum := sum,
	 th_urp := 0,
	 options := options,
	 data := data
}

/* TCP receive template */
template tcp_t tr_TCP(template th_flags_t fl := TH_ANY,
					  template u32 seq := ?,
					  template u32 ack := ?,
					  template octetstring data := *) := {
	 th_sport := ?,
	 th_dport := ?,
	 th_seq := seq,
	 th_ack := ack,
	 th_off := ?,
	 th_res := '000'B,
	 th_ecn := '000'B,
	 th_flags := fl,
	 th_win := ?,
	 th_sum := ?,
	 th_urp := ?,
	 options := *,
	 data := data
}

type enumerated tcp_state_t {
	TCP_LISTEN,
	TCP_SYN_SENT,
	TCP_SYN_RECEIVED,
	TCP_ESTABLISHED,
	TCP_FIN_WAIT_1,
	TCP_FIN_WAIT_2,
	TCP_CLOSE_WAIT,
	TCP_CLOSING,
	TCP_LAST_ACK,
	TCP_TIME_WAIT,
	TCP_CLOSED
} with {
	encode "TEXT";
}

external function tcp_state_to_string(in tcp_state_t x) return charstring
	with { extension "prototype(convert) encode(TEXT)"; }

function th_is_set(tcp_t tcp, th_flags_t f) return boolean
{
	if ((tcp.th_flags and4b f) == f) {
		return true;
	} else {
		return false;
	}
}

function th_set(inout tcp_t tcp, th_flags_t f)
{
	tcp.th_flags := tcp.th_flags or4b f;
}

type record icmp_t {
	icmp_type_t	icmp_type,
	uint8_t		icmp_code,
	uint16_t	icmp_cksum,
	icmp_data_t	data
}

type union icmp_data_t {
	icmp_echo_t	echo,
	octetstring	data
}

type record icmp_echo_t {
	uint16_t	icmp_id,
	uint16_t	icmp_seq,
	octetstring	data optional
} with {
	variant(icmp_id, icmp_seq) "BYTEORDER(last)";
}

type record icmp6_echo_t {
	uint16_t	icmp6_id,
	uint16_t	icmp6_seq,
	octetstring	data optional
} with {
	variant(icmp6_id, icmp6_seq) "BYTEORDER(last)";
}

type record icmp6_nbr_sol_t {
	bit1_t		ns_flag_router,
	bit1_t		ns_flag_solicited,
	bit1_t		ns_flag_override,
	u32	ns_reserved,
	in6_addr_t	ns_target,
	octetstring	ns_options optional
} with {
	variant(ns_reserved) "FIELDLENGTH(29)";
}

type record icmp6_nbr_adv_t {
	bit1_t		na_flag_router,
	bit1_t		na_flag_solicited,
	bit1_t		na_flag_override,
	u32	na_reserved,
	in6_addr_t	na_target,
	octetstring na_options optional
} with {
	variant(na_reserved) "FIELDLENGTH(29)";
}

type union icmp6_data_t {
	icmp6_echo_t		echo,
	icmp6_nbr_adv_t		nbr_adv,
	icmp6_nbr_sol_t		nbr_sol,
	octetstring			data
}

type record icmp6_t {
	icmp6_type_t	icmp6_type,
	uint8_t			icmp6_code,
	uint16_t		icmp6_cksum,
	icmp6_data_t	data optional
} with {
	variant(data) "CROSSTAG(
		echo,		icmp6_type = ICMP6_ECHO_REQUEST;
		echo,		icmp6_type = ICMP6_ECHO_REPLY;
		nbr_sol,	icmp6_type = ICMP6_NEIGHBOR_SOLICIT;
		nbr_adv,	icmp6_type = ICMP6_NEIGHBOR_ADVERT;
	)";
}

type record arp_t {
	uint16_t	arp_hrd,
	ethertype_t	arp_pro,
	uint8_t		arp_hln,
	uint8_t		arp_pln,
	uint16_t	arp_op,
	eth_addr_t	arp_sha,
	in_addr_t	arp_spa,
	eth_addr_t	arp_tha,
	in_addr_t	arp_tpa
} with {
	variant(arp_hrd, arp_pro, arp_op) "BYTEORDER(last)";
}

type enumerated ipproto_t {
	IPPROTO_IP(0),
	IPPROTO_ICMP(1),
	IPPROTO_TCP(6),
	IPPROTO_UDP(17),
	IPPROTO_IPV6(41),
	IPPROTO_ICMPV6(58),
	IPPROTO_RAW(255)
} with {
	variant "FIELDLENGTH(8)";
};

type enumerated ethertype_t {
	ETHERTYPE_IP('0800'H),
	ETHERTYPE_ARP('0806'H),
	ETHERTYPE_VLAN('8100'H),
	ETHERTYPE_IPV6('86dd'H)
} with {
	variant "FIELDLENGTH(16)";
};

type enumerated icmp_type_t {
	ICMP_ECHO_REPLY(0),
	ICMP_ECHO(8)
} with {
	variant "FIELDLENGTH(8)";
};

type enumerated icmp6_type_t {
	ICMP6_ECHO_REQUEST(128),
	ICMP6_ECHO_REPLY(129),
	ICMP6_ROUTER_SOLICIT(133),
	ICMP6_ROUTER_ADVERT(134),
	ICMP6_NEIGHBOR_SOLICIT(135),
	ICMP6_NEIGHBOR_ADVERT(136)
}

external function eth_enc(in eth_t packet) return octetstring
	with { extension "prototype(convert) encode(RAW)" };
external function eth_dec(in octetstring data) return eth_t
	with { extension "prototype(convert) decode(RAW)" };

external function ip_enc(in ip_t packet) return octetstring
	with { extension "prototype(convert) encode(RAW)" };
external function ip_dec(in octetstring data) return ip_t
	with { extension "prototype(convert) decode(RAW)" };

external function arp_enc(in arp_t packet) return octetstring
	with { extension "prototype(convert) encode(RAW)" };
external function arp_dec(in octetstring data) return arp_t
	with { extension "prototype(convert) decode(RAW)" };

external function icmp_enc(in icmp_t packet) return octetstring
	with { extension "prototype(convert) encode(RAW)" };
external function icmp_dec(in octetstring data) return icmp_t
	with { extension "prototype(convert) decode(RAW)" };

external function ip6_enc(in ip6_t packet) return octetstring
	with { extension "prototype(convert) encode(RAW)" };
external function ip6_dec(in octetstring data) return ip6_t
	with { extension "prototype(convert) decode(RAW)" };

external function icmp6_enc(in icmp6_t packet) return octetstring
	with { extension "prototype(convert) encode(RAW)" };
external function icmp6_dec(in octetstring data) return icmp6_t
	with { extension "prototype(convert) decode(RAW)" };

external function udp_enc(in udp_t packet) return octetstring
	with { extension "prototype(convert) encode(RAW)" };
external function udp_dec(in octetstring data) return udp_t
	with { extension "prototype(convert) decode(RAW)" };

external function tcp_enc(in tcp_t packet) return octetstring
	with { extension "prototype(convert) encode(RAW)" };
external function tcp_dec(in octetstring data) return tcp_t
	with { extension "prototype(convert) decode(RAW)" };

type port port_ip message { inout ip_t; } with { extension "internal"; }
type port port_arp message { inout arp_t; } with { extension "internal"; }
type port port_icmp message { inout icmp_t; } with { extension "internal"; }
type port port_ip6 message { inout ip6_t; } with { extension "internal"; }
type port port_icmp6 message { inout icmp6_t; } with { extension "internal"; }
type port port_tcp message { inout tcp_t; } with { extension "internal"; }
type port port_udp message { inout udp_t; } with { extension "internal"; }
type port port_cf message { inout charstring; } with { extension "internal"; }

function tcp_enc_dec(tcp_t msg_in, out tcp_t msg_out)
{
	var octetstring d := tcp_enc(msg_in);

	msg_out := tcp_dec(d);
}

function tcp_compare(tcp_t msg1, tcp_t msg2)
{
	if (msg1 == msg2) {
		setverdict(pass);
	} else {
		log("Decoded: ", msg2);
		setverdict(fail);
		self.stop;
	}
}

/**
 * Test TCP RAW encoder and decoder
 */
testcase tcp_codecs() runs on dummy_ct
{
	var tcp_t tcp, tcp2;

	/* No data, no options */

	tcp := valueof(ts_TCP)

	tcp_enc_dec(tcp, tcp2);

	tcp.th_off := 5;

	tcp_compare(tcp, tcp2);

	/* Data, no options */

	tcp := valueof(ts_TCP(data := '1111'O));

	tcp_enc_dec(tcp, tcp2);

	tcp.th_off := 5;

	tcp_compare(tcp, tcp2);

	/* Data, options */

	tcp := valueof(ts_TCP(data := '1111'O));

	tcp.options := {
		{ TO_MSS, 4, '0000'O },
		{ TO_MSS, 4, '0000'O }
	}

	tcp_enc_dec(tcp, tcp2);

	tcp.th_off := 7;

	tcp_compare(tcp, tcp2);

	/* No data, options */

	tcp := valueof(ts_TCP);

	tcp.options := {
		{ TO_MSS, 4, '0000'O },
		{ TO_MSS, 4, '0000'O }
	}

	tcp_enc_dec(tcp, tcp2);

	tcp.th_off := 7;

	tcp_compare(tcp, tcp2);
}

type record tcp2_t {
	uint16_t	th_sport,
	uint16_t	th_dport,
	u32	th_seq,
	u32	th_ack,
	uint4_t		th_off,
	bit3_t		th_res,
	bit3_t		th_ecn,
	th_flags_t	th_flags,
	uint16_t	th_win,
	uint16_t	th_sum,
	uint16_t	th_urp,
	octetstring data
} with {
	variant(th_sport, th_dport, th_seq, th_ack, th_win) "BYTEORDER(last)";
}

template tcp2_t ts_TCP2(th_flags_t fl := '000000'B,
						u32 seq := 0,
						u32 ack := 0,
						integer off := 5,
						template octetstring data := ''O) := {
	th_sport := 4242,
	th_dport := 4242,
	th_seq := seq,
	th_ack := ack,
	th_off := off,
	th_res := '000'B,
	th_ecn := '000'B,
	th_flags := fl,
	th_win := 1280,
	th_sum := 0,
	th_urp := 0,
	data := data
}

external function tcp2_enc(in tcp2_t packet) return octetstring
	with { extension "prototype(convert) encode(RAW)" };
external function tcp2_dec(in octetstring data) return tcp2_t
	with { extension "prototype(convert) decode(RAW)" };

type port port_tcp2 message { inout tcp2_t; } with { extension "internal"; }

type port port_eth message { inout octetstring; } with { extension "internal"; }

/**
 * TODO: Add templates test here
 */
function test_tcp_templates()
{
	setverdict(pass);
}

} with {
	variant "FIELDORDER(msb)";
	encode "RAW";
}
