/* -*- c-basic-offset: 4; tab-width: 4; -*- */
/*
 * Copyright Â© 2018-2022, Intel Corporation.
 * SPDX-License-Identifier: LGPL-2.1-only
 */

module tcp_suite {

import from libtypes all;
import from libnet all;
import from libtest all;
import from libutils all;
import from port_data_types all;

modulepar {
	float T_default := 3.0;
}

type component tcp_ct extends test_ct {
	var tcp_t tcp;
	var tcp_state_t s := TCP_LISTEN;
	var u32 seq := 0;
	var u32 ack := 0;
}

/**
 * Send TCP SYN, expect SYN+ACK
 */
testcase tc_tcp_003() runs on tcp_ct {

	test_ct_init();

	P_TCP.send(ts_TCP(fl := SYN));

	T.start;

	alt {
	[] P_TCP.receive(tr_TCP(fl := SYN or4b ACK)) {
		T.stop;
		setverdict(pass);
	}
	[] T.timeout {
		setverdict(fail);
	}
	}

	/* Terminate half open connection */

	P_TCP.send(ts_TCP(fl := RST, seq := pre_inc(seq)));
}

/**
 * Test TCP connection establishment, data transfer
 * (data echoing expected) and connection close.
 */
testcase tc_tcp_conn(octetstring data := ''O) runs on tcp_ct
{
	test_ct_init();

	var octetstring data_to_send := data;
	var octetstring data_unack := ''O;
	var integer data_step := 1;

	d_as_timeout := activate(as_timeout());
	d_as_unexpected_msg := activate(as_unexpected_msg());

	P_TCP.send(ts_TCP(fl := SYN, seq := post_inc(seq)));
	s := TCP_SYN_SENT;
	T.start;

	alt {
	[s == TCP_SYN_SENT] P_TCP.receive(tr_TCP(fl := SYN or4b ACK,
											 ack := seq)) -> value tcp {
		T.stop;
		s := TCP_SYN_RECEIVED;
		ack := tcp.th_seq;
		P_TCP.send(ts_TCP(fl := ACK, seq := seq, ack := pre_inc(ack)));
		T.start; repeat;
	}
	[s == TCP_SYN_RECEIVED] T.timeout {
		s := TCP_ESTABLISHED;
		deactivate(d_as_timeout); deactivate(d_as_unexpected_msg);
		T.start; repeat;
	}
	[s == TCP_ESTABLISHED] P_TCP.receive(tr_TCP) -> value tcp {
		T.stop;
		var tcp_t tcp2 := valueof(ts_TCP);
		if (th_is_set(tcp, PSH)) {
			th_set(tcp2, ACK);
			pre_inc(ack, lengthof(tcp.data));
		}
		if (th_is_set(tcp, ACK)) {
			if (tcp.th_ack > seq - lengthof(data_unack)) {
				var integer diff := tcp.th_ack - (seq - lengthof(data_unack));
				byte_array_remove_range(data_unack, index := 0, len := diff);
			}
		}
		if (tcp2.th_flags != TH_NONE) {
			tcp2.th_seq := seq;
			tcp2.th_ack := ack;
			P_TCP.send(tcp2);
		}
		T.start; repeat;
	}
	[s == TCP_ESTABLISHED] T.timeout {
		if (lengthof(data_unack) > 0) { goto wait_for_data; }
		if (lengthof(data_to_send) > 0) {
			data_unack := byte_array_remove_range(data_to_send, index := 0,
												  len := data_step);
			P_TCP.send(ts_TCP(fl := PSH,
							  seq := post_inc(seq, lengthof(data_unack)),
							  ack := ack, data := data_unack));
			goto wait_for_data;
		}
		/* Everything is sent and aknowledged, close the connection */
		s := TCP_CLOSE_WAIT;
		d_as_timeout := activate(as_timeout());
		d_as_unexpected_msg := activate(as_unexpected_msg());
		P_TCP.send(ts_TCP(fl := FIN or4b ACK,
					seq := post_inc(seq), ack := ack));
label wait_for_data;
		T.start; repeat;
	}
	[s == TCP_CLOSE_WAIT] P_TCP.receive(tr_TCP(fl := FIN or4b ACK,
											   ack := seq)) {
		T.stop;
		s := TCP_CLOSED;
		goto test_end;
	}
	}
label test_end;
	if (s == TCP_CLOSED and lengthof(data_to_send) == 0
			and lengthof(data_unack) == 0) {
		setverdict(pass);
	}
}

control {
	execute(tc_tcp_003());
	execute(tc_tcp_conn(data := '01'O));
}

}
