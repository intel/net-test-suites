/* -*- c-basic-offset: 4; tab-width: 4; -*- */
/*
 * Copyright Â© 2018-2020, Intel Corporation.
 *
 * SPDX-License-Identifier: LGPL-2.1-only
 */

/*
 * This is a sanity check for experimental TCP for Zephyr OS:
 * https://github.com/ozhuraki/zephyr/blob/tcp2-dev/README.md
 */

#include "tcp2_check.ttcnin"

module tcp2_check {

import from libtypes all;
import from libnet all;
import from libtest all;
import from libutils all;
import from tcp2_utils all;

type component tcp_ct extends test_ct {
	var tcp_state_t state := TCP_LISTEN;
	var u32 seq := 0;
	var u32 ack := 0;
	var octetstring snd := ''O;
	var octetstring rcv := ''O;
	var fuzzer_ct ct_fuzzer;
	port port_cf P_FZ;
	var tcp_t tcp; /* TODO: Drop */
}

/**
 * Suite's active connection establishment, optional data, and active close
 */
function tcp_connect(octetstring data_to_send := ''O,
					 octetstring data_to_receive := ''O,
					 boolean close := true,
					 u32 isn := 0,
					 template tcp_options_t options := omit) runs on tcp_ct
{
	seq := isn;

	tcp_init();

	P_TCP.send(ts_TCP(fl := SYN, seq := u32_post_inc(conn(seq)),
													 options := options));
	conn_state(TCP_SYN_SENT, fail_on := EV_TIMEOUT or4b EV_UNEXPECTED_MSG);
	T.start;

	P_TCP.receive(tr_TCP(fl := SYN or4b ACK, ack := conn(seq))) -> value tcp {
		T.stop;
		peer_assert(TCP_SYN_RECEIVED);
		conn_state(TCP_SYN_RECEIVED);
		ack := tcp.th_seq;
		P_TCP.send(ts_TCP(fl := ACK, seq := conn(seq),
						  ack := u32_pre_inc(conn(ack))));
		conn_state(TCP_ESTABLISHED, fail_on := EV_NONE);
		if (false == close) {
			goto end;
		}
	}
label est;
	peer_assert(TCP_ESTABLISHED);
	if (lengthof(snd) > 0) { goto wait_for_data; }
	if (lengthof(data_to_send) > 0) {
		snd := byte_array_remove_range(data_to_send, index := 0, len := 1);
		P_TCP.send(ts_TCP(fl := PSH,
						  seq := u32_post_inc(conn(seq), lengthof(snd)),
						  data := snd));
		goto wait_for_data;
	}

	/* Everything is sent and aknowledged, do active close */
	P_TCP.send(ts_TCP(fl := FIN or4b ACK, seq := u32_post_inc(conn(seq)),
					  ack := conn(ack)));
	conn_state(TCP_FIN_WAIT_1, fail_on := EV_TIMEOUT or4b EV_UNEXPECTED_MSG);

	/* TODO: peer_assert() here is tricky, since peer in active close
	   sends ack and fin+ack immedeately */
	label wait_for_data;
	T.start;

	alt {
	[TCP_ESTABLISHED == state] P_TCP.receive(tr_TCP) -> value tcp {
		T.stop;
		peer_assert(TCP_ESTABLISHED);
		var tcp_t tcp2 := valueof(ts_TCP);
		if (th_is_set(tcp, PSH)) {
			byte_array_append(rcv, tcp.data);
			th_set(tcp2, ACK);
			u32_pre_inc(conn(ack), lengthof(tcp.data));
		}
		if (th_is_set(tcp, ACK)) {
			if (tcp.th_ack > seq - lengthof(snd)) {
				var integer diff := tcp.th_ack - (seq - lengthof(snd));
				byte_array_remove_range(snd, index := 0, len := diff);
			}
		}
		if (tcp2.th_flags != TH_NONE) {
			tcp2.th_seq := conn(seq);
			tcp2.th_ack := conn(ack);
			P_TCP.send(tcp2);
		}
		T.start; repeat;
	}
	[TCP_ESTABLISHED == state] T.timeout {
		goto est;
	}
	[TCP_FIN_WAIT_1 == state] P_TCP.receive(tr_TCP(fl := FIN or4b ACK,
												   seq := conn(ack),
												   ack := conn(seq))) {
		T.stop;
		peer_assert(TCP_LAST_ACK);
		conn_state(TCP_CLOSED, fail_on := EV_NONE);
		P_TCP.send(ts_TCP(fl := ACK,
						  seq := conn(seq),
						  ack := u32_pre_inc(conn(ack))));
	}
	}  /* end of alt */

	peer_assert(TCP_CLOSED);

	if (TCP_CLOSED == state and 0 == lengthof(data_to_send) and
			0 == lengthof(snd) and rcv == data_to_receive) {
		setverdict(pass);
	} else {
		log("Error: data_to_receive: ", data_to_receive, " rcv: ", rcv);
		setverdict(fail);
	}

	tp_send(TP_COMMAND, "CLOSE");
label end;
}

/**
 * Suite's passive connection establishment, optional data and close
 */
function tcp_listen(octetstring data_to_send := ''O,
					octetstring data_to_receive := ''O,
					boolean close := true,
					u32 isn := 0) runs on tcp_ct
{
	tcp_init();

	tp_send(TP_COMMAND, "CONNECT", d := oct2str(data_to_receive), isn := isn);

	conn_state(TCP_LISTEN, fail_on := EV_TIMEOUT or4b EV_UNEXPECTED_MSG);
	T.start;

	alt {
	[TCP_LISTEN == state] P_TCP.receive(tr_TCP(fl := SYN)) -> value tcp {
		T.stop;
		peer_assert(TCP_SYN_SENT);
		conn_state(TCP_SYN_RECEIVED);
		ack := tcp.th_seq;
		P_TCP.send(ts_TCP(fl := SYN or4b ACK, seq := u32_post_inc(conn(seq)),
						  ack := u32_pre_inc(conn(ack))));
		conn_state(TCP_SYN_SENT);
		T.start; repeat;
	}
	[TCP_SYN_SENT == state] P_TCP.receive(tr_TCP(fl := ACK,
											 ack := conn(seq))) -> value tcp {
		T.stop;
		conn_state(TCP_SYN_RECEIVED);
		ack := tcp.th_seq;
		conn_state(TCP_ESTABLISHED, fail_on := EV_NONE);
		if (lengthof(data_to_send) > 0) {
			tp_send(TP_COMMAND, "SEND", oct2str(data_to_send));
		}
		if (close == false) {
			goto end;
		}
		if (lengthof(data_to_receive) > 0) {
			T.start; repeat;
		}
	}
	[TCP_ESTABLISHED == state] P_TCP.receive(tr_TCP(data := ?)) -> value tcp {
		if (th_is_set(tcp, PSH) or th_is_set(tcp, ACK)) {
			T.stop;
			peer_assert(TCP_ESTABLISHED);
			P_TCP.send(ts_TCP(fl := ACK, seq := conn(seq),
							  ack := u32_pre_inc(conn(ack),
												 lengthof(tcp.data))));
			byte_array_append(rcv, tcp.data);
			if (rcv != data_to_receive) {
				T.start; repeat;
			}
		}
	}
	} /* end of alt */

	peer_assert(TCP_ESTABLISHED);

	P_TCP.send(ts_TCP(fl := FIN or4b ACK, seq := u32_post_inc(conn(seq)),
					  ack := conn(ack)));
	conn_state(TCP_FIN_WAIT_1, fail_on := EV_TIMEOUT or4b EV_UNEXPECTED_MSG);
	T.start;

	alt {
	[TCP_FIN_WAIT_1 == state] P_TCP.receive(tr_TCP(fl := FIN or4b ACK,
												   seq := conn(ack),
												   ack := conn(seq))) {
		T.stop;
		peer_assert(TCP_LAST_ACK);
		conn_state(TCP_CLOSED, fail_on := EV_NONE);
		P_TCP.send(ts_TCP(fl := ACK,
						  seq := conn(seq),
						  ack := u32_pre_inc(conn(ack))));
	}
	} /* end of alt */

	peer_assert(TCP_CLOSED);

	if (state == TCP_CLOSED and rcv == data_to_receive) {
		setverdict(pass);
	} else {
		log("Error: data_to_receive: ", data_to_receive, " rcv: ", rcv);
		setverdict(fail);
	}

	tp_send(TP_COMMAND, "CLOSE");
label end;
}

/**
 * Send an IPv4 with IPPROTO_TCP but empty IP payload
 */
testcase tcp_undersized() runs on tcp_ct
{
	tcp_init();

	P_IP.send(valueof(ts_IP(IPPROTO_TCP, ''O)));

	if (do_ping() == true) { /* Ternary operator isn't supported */
		setverdict(pass);
	} else {
		setverdict(fail);
	}
}

/**
 * Test a reaction on SYN with incorrect th_off
 */
testcase tcp_incorrect_offset() runs on tcp_ct
{
	tcp_init();

	P_TCP2.send(ts_TCP2(fl := SYN, seq := u32_post_inc(conn(seq)), off := 3));

	T.start;
	alt {
	[] P_TCP.receive(tr_TCP(fl := RST)) {
		T.stop;
		setverdict(pass);
	}
	[] T.timeout {
		setverdict(fail);
	}
	} /* end of alt */

	tp_send(TP_COMMAND, "CLOSE");
}

testcase tcp_no_flags() runs on tcp_ct
{
	tcp_init();

	P_TCP.send(ts_TCP(fl := TH_NONE));

	if (do_ping() == true) {
		setverdict(pass);
	} else {
		setverdict(fail);
	}
}

/**
 * Test active TCP connection establishment and active close
 */
testcase tcp_connect_no_data_close() runs on tcp_ct
{
	tcp_connect(data_to_send := ''O);
}

/**
 * Test that RST works in ESTABLISHED
 */
testcase tcp_connect_no_data_reset() runs on tcp_ct
{
	var udp_t udp;
	var tp_new_t tp;

	tcp_connect(close := false);

	tcp_config({{ "tp_trace", "1" }});

	P_TCP.send(ts_TCP(fl := RST, seq := conn(seq)));
	T.start;

	alt {
	[] P_UDP.receive(?) -> value udp {
		T.stop;
		tp := f_tp_new_dec(udp.data);
		if (tp.data[0].val == "CONN_DELETE") {
			setverdict(pass);
		}
	}
	[] T.timeout { setverdict(fail); }
	} /* end of alt */

	tp_send(TP_COMMAND, "CLOSE");
}

/**
 * Test suite's active TCP connection establishment,
 * data transfer (echo expected) and suite's active close
 */
testcase tcp_connect_data_close() runs on tcp_ct
{
	tcp_connect(data_to_send := '01'O, data_to_receive := '01'O);
}

testcase tcp_connect_data_reset() runs on tcp_ct
{
	var octetstring data := '01'O;

	tcp_connect(data_to_send := data, data_to_receive := data, close := false);

	P_TCP.send(ts_TCP(fl := RST));

	T.start;
	T.timeout;

	peer_assert(TCP_CLOSED);

	setverdict(pass); /* this won't override the failure of peer_assert() */

	tp_send(TP_COMMAND, "CLOSE");
}

/**
 * Test active TCP connection establishment, "more data" and active close
 */
testcase tcp_connect_more_data_close() runs on tcp_ct
{
	tcp_connect(data_to_send := '010203'O, data_to_receive := '010203'O);
}

/**
 * Test that peer sends RST on missing data in ESTABLISHED
 */
testcase tcp_connect_data_gap() runs on tcp_ct
{
	var udp_t udp;
	var tp_new_t tp;
	var boolean reset_received := false;

	tcp_connect(close := false);

	tcp_config({{ "tp_trace", "1" }});

	P_TCP.send(ts_TCP(fl := PSH, seq := conn(seq) + 42, data := '01'O));
	T.start;

	alt {
	[] P_TCP.receive(tr_TCP(fl := RST)) {
		T.stop;
		reset_received := true;
		T.start; repeat;
	}
	[reset_received] P_UDP.receive(?) -> value udp {
		T.stop;
		tp := f_tp_new_dec(udp.data);
		if (tp.data[0].val == "CONN_DELETE") {
			setverdict(pass);
		}
	}
	[] T.timeout { setverdict(fail); }
	} /* end of alt */

	tp_send(TP_COMMAND, "CLOSE");
}

/**
 * Test passive TCP connection establishment and active close
 */
testcase tcp_listen_no_data_close() runs on tcp_ct
{
	tcp_listen(data_to_receive := ''O);
}

/**
 * Test that RST works in ESTABLISHED
 */
testcase tcp_listen_no_data_reset() runs on tcp_ct
{
	var udp_t udp;
	var tp_new_t tp;

	tcp_listen(close := false);

	tcp_config({{ "tp_trace", "1" }});

	P_TCP.send(ts_TCP(fl := RST, seq := conn(seq)));
	T.start;

	alt {
	[] P_UDP.receive(?) -> value udp {
		T.stop;
		tp := f_tp_new_dec(udp.data);
		if (tp.data[0].val == "CONN_DELETE") {
			setverdict(pass);
		}
	}
	[] T.timeout { setverdict(fail); }
	} /* end of alt */

	tp_send(TP_COMMAND, "CLOSE");
}

/**
 * Test passive TCP connection establishment, data and active close
 */
testcase tcp_listen_data_close() runs on tcp_ct
{
	tcp_listen(data_to_send := '01'O, data_to_receive := '01'O);
}

testcase tcp_listen_data_reset() runs on tcp_ct
{
	tcp_listen(data_to_send := '01'O, data_to_receive := '01'O, close := false);

	P_TCP.send(ts_TCP(fl := RST));

	T.start;
	T.timeout;

	peer_assert(TCP_CLOSED);

	setverdict(pass); /* this won't override the failure of peer_assert() */

	tp_send(TP_COMMAND, "CLOSE");
}

/**
 * Test passive TCP connection establishment, data and active close
 */
testcase tcp_listen_more_data_close() runs on tcp_ct
{
	tcp_listen(data_to_send := '010203'O, data_to_receive := '010203'O);
}

/**
 * Test sequence wraps/overflows
 */
testcase tcp_connect_seq_wrap() runs on tcp_ct
{
	tcp_connect(data_to_send := '01'O, data_to_receive := '01'O,
					 isn := hex2int('FFFFFFFE'H));
}

testcase tcp_listen_seq_wrap() runs on tcp_ct
{
	tcp_listen(data_to_send := '01'O, data_to_receive := '01'O,
			   isn := hex2int('FFFFFFFE'H));
}

/**
 * Test peer's retransmission
 */
testcase tcp_retransmit() runs on tcp_ct
{
	tcp_init();

	fuzzer_on();

	P_FZ.send("incoming_drop");

	P_TCP.send(ts_TCP(fl := SYN, seq := post_inc(conn(seq))));
	conn_state(TCP_SYN_SENT);
	T.start(T_default * 3.0);
	T.timeout;
	P_FZ.send("incoming_pass");

	T.start(T_default * 3.0);

	alt {
	[] P_TCP.receive(tr_TCP(fl := SYN or4b ACK,
							ack := conn(seq))) -> value tcp {
		T.stop;
		ack := tcp.th_seq;
		P_TCP.send(ts_TCP(fl := ACK, seq := conn(seq), ack := pre_inc(conn(ack))));
		setverdict(pass);
	}
	[] T.timeout {
		setverdict(fail);
	}
	}

	T.start(T_default);
	T.timeout;

	conn_state(TCP_ESTABLISHED, fail_on := EV_NONE);

	tp_send(TP_COMMAND, "CLOSE");
}

type record of octetstring tcp_test_data_t;

/**
 * Test the reception of data with variable chunks, verify peer's seq and ack,
 * and check what the peer has received with the TP_COMMAND/RECV
 */
/* TODO: Enhance this one with out of order data */
testcase tcp_peer_recv() runs on tcp_ct
{
	var tcp_test_data_t data := { '01'O, '0203'O, '040506'O };
	var octetstring data_total := ''O;

	tcp_connect(close := false);

	tcp_config({{ "tcp_echo", "0" }});

	for (var integer i := 0; i < sizeof(data); i := i + 1) {
		data_total := data_total & data[i];
		tcp_send(data[i]);
	}

	var tp_t peer := tp_send(TP_COMMAND, "RECV");

	if (str2oct(peer.data) == data_total) {
		setverdict(pass);
	}

	tp_send(TP_COMMAND, "CLOSE");
}

/**
 * Test peer's tcp_send() functionality
 */
testcase tcp_peer_send() runs on tcp_ct
{
	tcp_connect(close := false);

	var octetstring data := '01'O;

	tp_send(TP_COMMAND, "SEND", oct2str(data));

	T.start;

	alt {
	[state == TCP_ESTABLISHED] P_TCP.receive(tr_TCP(fl := PSH, seq := conn(seq),
													data := data)) {
		T.stop;
		setverdict(pass);
	}
	[state == TCP_ESTABLISHED] T.timeout {
		setverdict(fail);
	}
	} /* end of alt */

	peer_assert(TCP_ESTABLISHED);

	tp_send(TP_COMMAND, "CLOSE");
}

/**
 * Send an undersized data in ESTABLISHED
 */
testcase tcp_data_undersized() runs on tcp_ct
{
	tcp_connect(close := false);

	P_TCP.send(ts_TCP(fl := PSH, seq := conn(seq), data := ''O));

	T.start;

	alt {
	[state == TCP_ESTABLISHED] P_TCP.receive(tr_TCP(fl := RST)) {
		T.stop;
		peer_assert(TCP_CLOSED);
		setverdict(pass);
	}
	[state == TCP_ESTABLISHED] T.timeout {
		setverdict(fail);
	}
	} /* end of alt */

	tp_send(TP_COMMAND, "CLOSE");
}

/**
 * Test a reaction on TCP data packets with options
 */
testcase tcp_data_options() runs on tcp_ct
{
	tcp_connect(close := false);

	var octetstring data_to_send := '010203'O;

	tcp := valueof(ts_TCP(fl := PSH,
						  seq := u32_post_inc(conn(seq), lengthof(data_to_send)),
						  data := data_to_send));

	tcp.options := {
		{ TO_MSS, 4, int2oct(1460, 2) }
	}

	P_TCP.send(tcp);
	T.start;

	alt {
	[state == TCP_ESTABLISHED] P_TCP.receive(tr_TCP(fl := ACK, ack := conn(seq))) {
		T.stop;
		T.start; repeat;
	}
	[state == TCP_ESTABLISHED] P_TCP.receive(tr_TCP) -> value tcp {
		T.stop;
		if (th_is_set(tcp, PSH) and tcp.data == data_to_send) {
			setverdict(pass);
			goto end;
		}
	}
	[state == TCP_ESTABLISHED] T.timeout {
		setverdict(fail);
		goto end;
	}
	} /* end of alt */

	peer_assert(TCP_ESTABLISHED);

label end;
	tp_send(TP_COMMAND, "CLOSE");
}

/**
 * Test a reaction on TCP data packets with incorrect options
 */
testcase tcp_data_incorrect_options() runs on tcp_ct
{
	tcp_connect(close := false);

	var octetstring data_to_send := '010203'O;

	tcp := valueof(ts_TCP(fl := PSH,
						  seq := u32_post_inc(conn(seq), lengthof(data_to_send)),
						  data := data_to_send));
	tcp.options := {
		{ TO_MSS, 3, '00'O } /* Incorrect option length */
	}

	P_TCP.send(tcp);
	T.start;

	alt {
	[state == TCP_ESTABLISHED] P_TCP.receive(tr_TCP(fl := RST)) {
		T.stop;
		setverdict(pass);
	}
	[state == TCP_ESTABLISHED] T.timeout {
		setverdict(fail);
		goto end;
	}
	} /* end of alt */

	peer_assert(TCP_CLOSED);

label end;
	tp_send(TP_COMMAND, "CLOSE");
}

/**
 * Test a reaction on TCP data with incorrect offset
 */
testcase tcp_data_incorrect_offset() runs on tcp_ct
{
	var octetstring data_to_send := '010203'O;

	tcp_connect(close := false);

	var tcp2_t tcp2 := valueof(ts_TCP2(fl := PSH,
							seq := u32_post_inc(conn(seq), lengthof(data_to_send)),
							off := 3,
							data := data_to_send));
	P_TCP2.send(tcp2);

	T.start;

	alt {
	[state == TCP_ESTABLISHED] P_TCP.receive(tr_TCP(fl := RST)) {
		T.stop;
		peer_assert(TCP_CLOSED);
		setverdict(pass);
	}
	[state == TCP_ESTABLISHED] T.timeout {
		setverdict(fail);
	}
	} /* end of alt */

	tp_send(TP_COMMAND, "CLOSE");
}

testcase tcp_connect_isn_no_data() runs on tcp_ct
{
	tcp_connect(isn := 333);
}

testcase tcp_connect_isn_data() runs on tcp_ct
{
	var octetstring data := '01'O;

	tcp_connect(data_to_send := data, data_to_receive := data, isn := 333);
}

testcase tcp_connect_isn_more_data() runs on tcp_ct
{
	var octetstring data := '010203'O;

	tcp_connect(data_to_send := data, data_to_receive := data, isn := 333);
}

testcase tcp_listen_isn_no_data() runs on tcp_ct
{
	tcp_listen(isn := 333);
}

testcase tcp_listen_isn_data() runs on tcp_ct
{
	tcp_listen(data_to_send := '01'O, data_to_receive := '01'O, isn := 333);
}

testcase tcp_listen_isn_more_data() runs on tcp_ct
{
	tcp_listen(data_to_send := '010203'O, data_to_receive := '010203'O, isn := 333);
}

/*
 * Test peer's active close:
 *
 * - Check that peer is in FIN_WAIT_1 after it sends FIN+ACK
 * - Check that peer is in TIME_WAIT after the reception of FIN+ACK
 */
testcase tcp_peer_close() runs on tcp_ct
{
	tcp_connect(close := false);

	tp_send(TP_COMMAND, "CLOSE2");

	T.start;

	alt {
	[state == TCP_ESTABLISHED] P_TCP.receive(tr_TCP(fl := FIN or4b ACK,
													seq := conn(ack),
													ack := conn(seq))) {
		T.stop;
		peer_assert(TCP_FIN_WAIT_1);
		conn_state(TCP_CLOSING);
		P_TCP.send(ts_TCP(fl := FIN or4b ACK,
						  seq := conn(seq),
						  ack := u32_pre_inc(conn(ack))));
		T.start(T_default/4.0); repeat;
	}
	[state == TCP_CLOSING] T.timeout {
		peer_assert(TCP_TIME_WAIT);
		setverdict(pass);
	}
	}

	tp_send(TP_COMMAND, "CLOSE");
}

/*
 * Test peer's retransmission in active close:
 *
 * - Check that peer retransmits in FIN_WAIT_1 state
 * - Check that peer deletes the connection on no response
 */
testcase tcp_peer_close_retransmit() runs on tcp_ct
{
#define TCP_RETRIES 1
	var udp_t udp;
	var tp_new_t tp;
	var integer replies := 0;

	tcp_connect(close := false);

	tcp_config({
			{ "tp_trace", "1" },
			{ "tcp_rto", int2str(TO_MSEC(T_default/4.0)) },
			{ "tcp_retries", int2str(TCP_RETRIES) }
		});

	tp_send(TP_COMMAND, "CLOSE2");

	T.start;

	alt {
	[state == TCP_ESTABLISHED] P_TCP.receive(tr_TCP(fl := FIN or4b ACK,
													seq := conn(ack),
													ack := conn(seq))) {
		T.stop;
		replies := replies + 1;
		T.start; repeat;
	}
	[] P_UDP.receive(?) -> value udp {
		T.stop;
		tp := f_tp_new_dec(udp.data);
		if (tp.data[0].val == "CONN_DELETE" and replies == (TCP_RETRIES + 1)) {
			setverdict(pass);
		}
	}
	}

	tp_send(TP_COMMAND, "CLOSE");
#undef TCP_RETRIES
}

testcase tcp_close2() runs on tcp_ct
{
	tcp_connect(close := false);

	tp_send(TP_COMMAND, "CLOSE2");

	P_TCP.receive(tr_TCP(fl := FIN or4b ACK, seq := conn(ack),
						 ack := conn(seq)));

	P_TCP.send(ts_TCP(fl := ACK, seq := conn(seq),
					  ack := u32_pre_inc(conn(ack))));
}

/**
 * This sketch is used to complete egress TCP data path at the peer.
 */
testcase tcp_send2() runs on tcp_ct
{
	tcp_connect(close := false);

	fuzzer_on();

	P_FZ.send("incoming_drop");

	var octetstring data := '010203'O;

	while (lengthof(data) > 0) {
		tp_send(TP_COMMAND, "SEND",
				oct2str(byte_array_remove_range(data, 0, 1)));
	}

	peer_assert(TCP_ESTABLISHED);

	setverdict(pass);

	tp_send(TP_COMMAND, "CLOSE");
}

testcase tcp_rtt() runs on tcp_ct
{
	tcp_init();

	const integer N := 20;

	var integer i := N;
	var float total := 0.0, min := 1000.0, max := 0.0, rtt;

	while (post_dec(i) > 0) {

		T.start;

		if (do_ping(t:= 1000.0) == false) {
			setverdict(fail);
		}
		rtt := T.read;
		T.stop;
		//log("rtt: ", rtt);
		total := total + rtt;
		if (rtt > max) {
			max := rtt;
		}
		if (rtt < min) {
			min := rtt;
		}
	}

	log("avg: ", total / int2float(N));
	log("min: ", min);
	log("max: ", max);

	i := N;
	total := 0.0;
	min := 1000.0;
	max := 0.0;

	while (post_dec(i) > 0) {

		T.start;

		tcp_config({{ "tcp_echo", "0" }});

		alt {
		[] P_UDP.receive(?) {
			rtt := T.read;
			T.stop;
			//log("rtt: ", rtt);
			total := total + rtt;
			if (rtt > max) {
				max := rtt;
			}
			if (rtt < min) {
				min := rtt;
			}
		}
		[] T.timeout {
			setverdict(fail);
		}
		} /* end of alt */
	}

	log("avg: ", total / int2float(N));
	log("min: ", min);
	log("max: ", max);
}

testcase tcp_connect_early_data() runs on tcp_ct
{
	var octetstring data := '01'O;

	tcp_init();

	tcp_config({{ "tcp_echo", "0" }});

	P_TCP.send(ts_TCP(fl := SYN, seq := u32_post_inc(conn(seq))));
	conn_state(TCP_SYN_SENT, fail_on := EV_TIMEOUT or4b EV_UNEXPECTED_MSG);
	T.start;
	P_TCP.receive(tr_TCP(fl := SYN or4b ACK, ack := conn(seq))) -> value tcp {
		T.stop;
		ack := tcp.th_seq;
		P_TCP.send(ts_TCP(fl := ACK or4b PSH, seq := conn(seq),
						  ack := u32_pre_inc(conn(ack)), data := data));
	}
	T.start;
	T.timeout;

	var tp_t peer := tp_send(TP_COMMAND, "RECV");

	if (str2oct(peer.data) == data) {
		setverdict(pass);
	}

	tp_send(TP_COMMAND, "CLOSE");
}

/**
 * This is just a convenience for development/debug purposes
 */
testcase tp_close() runs on tcp_ct
{
	tcp_init(config := false);

	tp_send(TP_COMMAND, "CLOSE");
}

function tcp_close() runs on tcp_ct
{
	P_TCP.send(ts_TCP(fl := RST, seq := conn(seq)));
}

/**
 * This sketch is used to complete ingress TCP data path at the peer.
 */
testcase tcp_connect2() runs on tcp_ct
{
	tcp_connect(close := false);

	P_TCP.send(ts_TCP(fl := PSH, seq := u32_post_inc(conn(seq)),
					  data := '01'O));

	T.start(1.0);
	T.timeout;

	tcp_close();

	T.start(1.0);
	T.timeout;
}

/**
 * This is just an example of how the receive window can be adjusted
 * with the test protocol v1.
 */
testcase tcp_window() runs on tcp_ct
{
	test_ct_init();

	tcp_config({{ "tcp_window", "64" }});
}

/**
 * Send a data without PSH, the data should be placed into the receive window.
 */
testcase tcp_connect_data_with_ack_close() runs on tcp_ct
{
	var octetstring data := byte_array_new(len := 512, c := '01'O);

	tcp_connect(close := false);

	P_TCP.send(ts_TCP(fl := ACK,
					  seq := u32_post_inc(conn(seq)),
					  ack := conn(ack),
					  data := data));

	var tp_t peer := tp_send(TP_COMMAND, "RECV");

	if (str2oct(peer.data) == data) {
		setverdict(pass);
	}

	tp_send(TP_COMMAND, "CLOSE");
}

/**
 * This test checks if data from the peer is retansmitted
 */
testcase tcp_data_retransmit() runs on tcp_ct
{
	tcp_connect(close := false);

	tcp_config({
			{ "tcp_rto", int2str(TO_MSEC(T_default/4.0)) },
			{ "tcp_retries", int2str(1) },
			{ "tp_trace", "1" }
		});

	var octetstring data := '01'O;
	var octetstring data_received := ''O;
	var integer count := 0;
	var boolean conn_closed := false;
	var udp_t udp;

	tp_send(TP_COMMAND, "SEND", oct2str(data));

	T.start;

	alt {
		[] P_TCP.receive(tr_TCP(seq := conn(ack), ack := conn(seq)))
				-> value tcp {
			T.stop;
			count := count + 1;
			if (count > 1) {
				byte_array_append(data_received, tcp.data);
			}
			T.start;
			repeat;
		}
		[] P_UDP.receive(?) -> value udp {
			T.stop;
			var tp_new_t tp := f_tp_new_dec(udp.data);
			if (tp.data[0].val == "CONN_DELETE") {
				conn_closed := true;
			}
		}
		[] T.timeout {
			setverdict(fail);
		}
	}

	if (data_received == data and conn_closed == true) {
		setverdict(pass);
	}

	tp_send(TP_COMMAND, "CLOSE");
}

/**
 * This test checks if peer sends data with the maximum segment size (MSS)
 */
testcase tcp_data_mss() runs on tcp_ct
{
	tcp_connect(close := false,
				options := {{ TO_MSS, 4, int2oct(1/*mss=1*/, 2) }});

	tcp_config({{ "tp_trace", "1" }});

	var octetstring data := '010203'O;
	var octetstring data_received := ''O;
	var boolean conn_closed := false;
	var udp_t udp;

	tp_send(TP_COMMAND, "SEND", oct2str(data));

	T.start;

	alt {
		[] P_TCP.receive(tr_TCP(seq := conn(ack), ack := conn(seq)))
				-> value tcp {
			T.stop;
			P_TCP.send(ts_TCP(fl := ACK, ack := u32_pre_inc(conn(ack))));
			byte_array_append(data_received, tcp.data);
			T.start;
			repeat;
		}
		[] P_TCP.receive(?) {
			setverdict(fail);
		}
		[] P_UDP.receive(?) -> value udp {
			T.stop;
			var tp_new_t tp := f_tp_new_dec(udp.data);
			if (tp.data[0].val == "CONN_DELETE") {
				conn_closed := true;
			}
		}
		[] T.timeout {

		}
	}

	if (data_received == data and conn_closed == false) {
		setverdict(pass);
	}

	tp_send(TP_COMMAND, "CLOSE");
}

/**
 * This test checks if peer sends data not exceeding the window size
 */
testcase tcp_data_win() runs on tcp_ct
{
	tcp_connect(close := false);

	tcp_config({
			{ "tp_trace", "1" },
			{ "tcp_rto", int2str(TO_MSEC(T_default/4.0)) }
		});

	var octetstring data := '010203'O;
	var octetstring data_received := ''O;
	var boolean conn_closed := false;
	var udp_t udp;

	P_TCP.send(ts_TCP(fl := ACK, seq := conn(seq), ack := conn(ack), win := 1));

	tp_send(TP_COMMAND, "SEND", oct2str(data));

	T.start;

	alt {
		[] P_TCP.receive(tr_TCP(seq := conn(ack), ack := conn(seq)))
				-> value tcp {
			T.stop;
			P_TCP.send(ts_TCP(fl := ACK, seq := conn(seq),
							  ack := u32_pre_inc(conn(ack)), win := 1));
			byte_array_append(data_received, tcp.data);
			T.start;
			repeat;
		}
		[] P_TCP.receive(?) {
			setverdict(fail);
		}
		[] P_UDP.receive(?) -> value udp {
			T.stop;
			var tp_new_t tp := f_tp_new_dec(udp.data);
			if (tp.data[0].val == "CONN_DELETE") {
				conn_closed := true;
			}
		}
		[] T.timeout {

		}
	}

	if (data_received == data and conn_closed == false) {
			setverdict(pass);
	}

	tp_send(TP_COMMAND, "CLOSE");
}

/**
 * This test checks if peer can recover from the data retansmition
 */
testcase tcp_data_retransmit_recover() runs on tcp_ct
{
	tcp_connect(close := false);

	tcp_config({{ "tcp_rto", int2str(TO_MSEC(T_default/4.0)) },
				{ "tcp_retries", int2str(1) },
				{ "tp_trace", "1" }});

	var octetstring data := '010203'O;
	var octetstring data_received := ''O;
	var boolean conn_closed := false;
	var integer n := 0;
	var udp_t udp;

	P_TCP.send(ts_TCP(fl := ACK, seq := conn(seq), ack := conn(ack), win := 1));

	tp_send(TP_COMMAND, "SEND", oct2str(data));

	T.start;

	alt {
		[] P_TCP.receive(tr_TCP(seq := 1, ack := conn(seq))) -> value tcp {
			T.stop;
			byte_array_append(data_received, tcp.data);
			P_TCP.send(ts_TCP(fl := ACK, seq := conn(seq),
							  ack := u32_pre_inc(conn(ack)), win := 1));
			T.start;
			repeat;
		}
		[] P_TCP.receive(tr_TCP(seq := 2, ack := conn(seq))) -> value tcp {
			T.stop;
			n := n + 1;
			if (n == 2) {
				byte_array_append(data_received, tcp.data);
				P_TCP.send(ts_TCP(fl := ACK, seq := conn(seq),
								  ack := u32_pre_inc(conn(ack)), win := 1));
			}
			T.start;
			repeat;
		}
		[] P_TCP.receive(tr_TCP(seq := 3, ack := conn(seq))) -> value tcp {
			T.stop;
			byte_array_append(data_received, tcp.data);
			P_TCP.send(ts_TCP(fl := ACK, seq := conn(seq),
							  ack := u32_pre_inc(conn(ack)), win := 1));
			T.start;
			repeat;
		}
		[] P_UDP.receive(?) -> value udp {
			T.stop;
			var tp_new_t tp := f_tp_new_dec(udp.data);
			if (tp.data[0].val == "CONN_DELETE") {
				conn_closed := true;
			}
		}
		[] T.timeout {

		}
	}

	if (data_received == data and conn_closed == false and n == 2) {
			setverdict(pass);
	}

	tp_send(TP_COMMAND, "CLOSE");
}

control {

	timer TTT;

	TTT.start(3600.0);

	var integer i := number_of_runs, tests_failed := 0;

	while (post_dec(i) > 0) {
		execute(tcp_codecs());
		execute(tcp_undersized());
		execute(tcp_incorrect_offset());
		execute(tcp_no_flags());
		execute(tcp_connect_no_data_close());
		execute(tcp_connect_no_data_reset());
		execute(tcp_connect_data_close());
		execute(tcp_connect_data_reset());
		execute(tcp_connect_more_data_close());
		//execute(tcp_connect_data_gap());
		execute(tcp_listen_no_data_close());
		execute(tcp_listen_no_data_reset());
		execute(tcp_listen_data_close());
		execute(tcp_listen_data_reset());
		execute(tcp_listen_more_data_close());
		//execute(tcp_connect_seq_wrap());
		execute(tcp_listen_seq_wrap());
		//execute(tcp_retransmit());
		//execute(tcp_peer_recv());
		//execute(tcp_peer_send());
		//execute(tcp_data_undersized());
		execute(tcp_data_options());
		//execute(tcp_data_incorrect_options());
		execute(tcp_data_incorrect_offset());
		execute(tcp_connect_isn_no_data());
		execute(tcp_connect_isn_data());
		execute(tcp_connect_isn_more_data());
		execute(tcp_listen_isn_no_data());
		execute(tcp_listen_isn_data());
		execute(tcp_listen_isn_more_data());
		execute(tcp_send2());
		//execute(tcp_connect_early_data());
		execute(tcp_peer_close());
		execute(tcp_peer_close_retransmit());
	}
label end;
	log("TTT: ", TTT.read);

} /* end of control */

} /* end of module */
